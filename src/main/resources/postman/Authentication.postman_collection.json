{
	"info": {
		"_postman_id": "7ae47447-5749-40a7-af03-b065533b64f4",
		"name": "Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "updateUser",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwt}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/users/:user/:pass/:role",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"users",
								":user",
								":pass",
								":role"
							],
							"variable": [
								{
									"key": "user",
									"value": "hola"
								},
								{
									"key": "pass",
									"value": "1234"
								},
								{
									"key": "role",
									"value": "admin"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "checkIfUserExists",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/users/:user",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"users",
								":user"
							],
							"variable": [
								{
									"key": "user",
									"value": "{{username}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteUser",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwt}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/users/:user",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"users",
								":user"
							],
							"variable": [
								{
									"key": "user",
									"value": "hola"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createUser",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{jwt}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/auth/users/:user/:pass/:role",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"users",
								":user",
								":pass",
								":role"
							],
							"variable": [
								{
									"key": "user",
									"value": "Irene"
								},
								{
									"key": "pass",
									"value": "123"
								},
								{
									"key": "role",
									"value": "admin"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "getToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (Right Credentials)\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"try{",
							"    tests[\"Access Token is assigned, and it's a string\"] = typeof pm.response.json().jwt === 'string';",
							"",
							"    //tests[\"Refresh Token is assigned, and it's a string\"] = typeof pm.response.json().refresh_token === 'string';",
							"    ",
							"    pm.environment.set(\"jwt\", pm.response.json().jwt);",
							"    //pm.environment.set(\"refresh_token\", pm.response.json().refresh_token);",
							"} catch (ex){",
							"    tests[\"An error occured\"] = false;",
							"}",
							"",
							"if (pm.environment.get(\"lastRequestBeforeAuthenticationFailed\") !== null && pm.environment.get(\"lastRequestBeforeAuthenticationFailed\") !== undefined && pm.environment.get(\"lastRequestBeforeAuthenticationFailed\") !== \"\"){",
							"    postman.setNextRequest( pm.environment.get(\"lastRequestBeforeAuthenticationFailed\") );",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{username}}",
							"description": "user ",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"description": "pass",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/auth/token",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "refreshToken",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/auth/refreshToken",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"refreshToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "getToken M2M",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try{",
							"    var jsonData = JSON.parse(responseBody);",
							"    if(jsonData) {",
							"    pm.environment.set(\"jwt\", jsonData.access_token);",
							"}",
							"} catch (ex){",
							"    tests[\"An error occured\"] = false;",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{client-secret}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{client-id}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{protocol}}://{{host}}:{{port}}/auth/oauth/token",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"oauth",
						"token"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}